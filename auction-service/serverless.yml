service:
  name: auction-service

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: "us-east-1"
  environment:
    # Pass to the javascript code the value of the table 
    # serverless-pseudo-parameters allows to do templating 
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    # Pass the URL for mail services 
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    # Bucket Name 
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}
  # IAM role statememnts to allow to write in DB
  iamRoleStatements:
    #  Allow table statements and CRUD operations 
    - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}
    # Allow messaging service 
    - ${file(iam/MailQueueIAM.yml):MailQueueIAM}
    # S3 buclet IAM policyt
    - ${file(iam/AuctionsBucketIAM.yml):AuctionsBucketIAM}


resources:
  Resources:
    # Resource for the table 
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}
    # S3 Bucket 
    AuctionsBucket: ${file(resources/AuctionsBucket.yml):AuctionsBucket}
    AuctionsBucketPolicy: ${file(resources/AuctionsBucket.yml):AuctionsBucketPolicy}


functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /auction
          # ARN of the service that authorizes 
          authorizer: ${self:custom.authorizer}

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /auctions
          authorizer: ${self:custom.authorizer}

  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: GET
          path: /auction/{id}
          authorizer: ${self:custom.authorizer}
  
  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/bid
          authorizer: ${self:custom.authorizer}
  
  processAuctions:
    handler: src/handlers/processAuctions.handler
    events:
      # run evry minute in eventbridge
     - schedule: rate(1 minute)

  uploadAuctionPicture:
    handler: src/handlers/uploadAuctionPicture.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/picture
          authorizer: ${self:custom.authorizer}
  

          

custom:
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth-service-${self:provider.stage}-auth
    #  Get name https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
  AuctionsTable:
    # Get name of the table 
    name: !Ref AuctionsTable
    #  Get arn of the table
    arn: !GetAtt AuctionsTable.Arn  
  # Pooling Mail queue 
  MailQueue:
    # Pick up fro cloud formations cf - cloud formations
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
  AuctionsBucket:
  # S3 bucket name 
    name: auctinos-bucket-ddzmitry-${self:provider.stage}  
  bundle:
    linting: false
